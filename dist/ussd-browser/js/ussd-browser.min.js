class ConfigManager{static CONFIG_KEY(){return CONFIG_KEY="ussd_configs"}getConfigs(){var e=localStorage.getItem(this.CONFIG_KEY);return JSON.parse(e)||[]}addConfig(e){let t=this.getConfigs();t.push(e);e=JSON.stringify(t);localStorage.setItem(this.CONFIG_KEY,e)}removeConfig(t){const e=this.getConfigs();var s=e.filter(e=>e.name!==t.name),s=JSON.stringify(s);localStorage.setItem(this.CONFIG_KEY,s)}removeAll(){localStorage.removeItem(this.CONFIG_KEY)}}class USSDGatewayTalker{constructor(e){this.sessionId=null,this.serviceKey=null,this.phoneNumber=null,this.sequenceNumber=0,this.endpoint=null,this.languageCode="ENU",this.authorizationHeader=null,this.localSavable=e.features.includes("localSave"),this.displayOptions=e.display,this.inputOptions=e.input,this.buttonOptions=e.button,this.paramsOptions=e.params,this.wrapper=new Wrapper,this.outputDisplay=this.wrapper.getElementById(this.displayOptions,"outputScreenElId",!0),this.prompt=this.wrapper.getElementById(this.inputOptions,"promptElId",!0),this.savedConfigPan=this.wrapper.getElementById(this.displayOptions,"configListElId",this.localSavable),this.setupButtonListners(this.buttonOptions),this.configManager=new ConfigManager,this.localSavable&&this.refreshSavedConfigsDisplay()}setupButtonListners(e){const t=this.wrapper.getElementById(e,"newSessionElId",!0);t.onclick=()=>{this.isParametersFieldsFullyFilled()?this.startNewSession():alert("Please fill all required parameters: "+this.missingParameters().join(","))};const s=this.wrapper.getElementById(e,"sendElId",!0);if(s.onclick=()=>{0!==this.prompt.value.length?(this.prompt.classList.remove("is-invalid"),this.sendBackResponse()):this.prompt.classList.add("is-invalid")},this.localSavable){const i=this.wrapper.getElementById(e,"loadConfigElId",!0),n=this.wrapper.getElementById(e,"configFileInputElId",!0);n.addEventListener("change",e=>{e=e.target.files[0];const t=new FileReader;t.onload=t=>{try{let e=JSON.parse(t.target.result);Array.isArray(e)||(e=[e]);for(const l of e){var{name:s,endpoint:i,serviceKey:n,phoneNumber:a,languageCode:r,authorizationHeader:o}=l;this.configManager.addConfig({name:s,endpoint:i,serviceKey:n,phoneNumber:a,languageCode:r,authorizationHeader:o})}this.refreshSavedConfigsDisplay()}catch(e){alert("ex when trying to parse json = "+e)}},t.readAsText(e)}),i.onclick=()=>n.click();const a=document.getElementById(e.removeAllConfigElId);a.onclick=()=>this.removeAllConfigs();const r=this.wrapper.getElementById(e,"saveLocalElId",!0);r.onclick=()=>{var e=prompt("Input the name of the configuration","default");this.refreshParams(),this.configManager.addConfig({name:e,endpoint:this.endpoint,serviceKey:this.serviceKey,phoneNumber:this.phoneNumber,authorizationHeader:this.authorizationHeader}),this.refreshSavedConfigsDisplay()}}}createBodyRequest(e=null){return`<methodCall><methodName>USSD_MESSAGE</methodName><params><param><value><struct><member><name>SEQUENCE</name><value><string>${this.sequenceNumber||""}</string></value></member><member><name>END_OF_SESSION</name><value><string>FALSE</string></value></member><member><name>LANGUAGE</name><value><string>${this.languageCode||""}</string> </value></member><member><name>SESSION_ID</name><value><string>${this.sessionId||""}</string></value></member><member><name>SERVICE_KEY</name><value><string>${this.serviceKey||""}</string></value></member><member><name>MOBILE_NUMBER</name><value><string>${this.phoneNumber||""}</string></value></member><member><name>USSD_BODY</name><value><string>${e||""}</string></value></member></struct></value></param></params></methodCall>`}responseHasOptions(e){return e.match(/\n[0-9]./g)}refreshParams(){this.paramsOptions||(this.paramsOptions={}),this.serviceKey=this.paramsOptions.serviceKey||this.wrapper.getElementById(this.inputOptions,"serviceKeyElId",!0).value,this.phoneNumber=this.paramsOptions.phoneNumber||this.wrapper.getElementById(this.inputOptions,"phoneNumberElId",!0).value,this.endpoint=this.paramsOptions.endpoint||this.wrapper.getElementById(this.inputOptions,"endpointElId",!0).value,this.authorizationHeader=this.paramsOptions.authorizationHeader||this.wrapper.getElementById(this.inputOptions,"authHeaderElId",!0).value,this.languageCode=this.paramsOptions.languageCode||this.wrapper.getElementById(this.inputOptions,"languageCodeElId",!0).value}refreshSavedConfigsDisplay(){this.savedConfigPan.innerHTML="";for(const t of this.configManager.getConfigs()){const s=document.createElement("li");var e=document.createTextNode(t.name+" ");const i=document.createElement("button");i.innerHTML="load",i.classList=["btn btn-sm btn-info"],i.onclick=()=>this.loadConfig(t);const n=document.createElement("button");n.innerHTML="remove",n.classList=["btn btn-sm btn-danger"],n.onclick=()=>this.removeConfig(t),s.appendChild(e),s.appendChild(i),s.appendChild(n),this.savedConfigPan.append(s)}}makeAndHandleRequest(e){console.log("Auth",this.authorizationHeader),console.log("endpoint",this.endpoint);var t={Authorization:this.authorizationHeader};Utils.postAjax(this.endpoint,t,e,e=>{const t=new DOMParser;e=t.parseFromString(e,"text/xml"),e=Utils.xmlToJson(e).methodResponse.params.param.value.struct.member[4].value.string["#text"];this.outputDisplay.value=e,this.checkDisplayLength()})}checkDisplayLength(){const e=this.wrapper.getElementById(this.displayOptions,"screenLengthOverflowId",!1);e&&(160<this.outputDisplay.value.length?(this.outputDisplay.classList.add("is-invalid"),e.removeAttribute("hidden")):(this.outputDisplay.classList.remove("is-invalid"),e.setAttribute("hidden","")))}isParametersFieldsFullyFilled(){return!!(this.serviceKey&&this.phoneNumber&&this.endpoint&&this.authorizationHeader)}missingParameters(){let e=[];for(const t of[["serviceKey","serviceKeyElId"],["phoneNumber","phoneNumberElId"],["endpoint","endpointElId"],["authHeader","authHeaderElId"]])if(!this.paramsOptions[t[0]]){const s=this.wrapper.getElementById(this.inputOptions,t[1],!0);this.paramsOptions[t[0]]=s.value,s&&0!==s.value.length||(e.push(t[0]),s&&(s.style="border-color: red"))}return e}startNewSession(){this.sessionId=Math.floor(1e5*Math.random()),this.sequenceNumber=0,this.refreshParams();var e=this.createBodyRequest();this.makeAndHandleRequest(e)}sendBackResponse(){this.sequenceNumber++;var e=this.createBodyRequest(this.prompt.value);this.makeAndHandleRequest(e)}loadConfig(e){const t=this.wrapper.getElementById(this.inputOptions,"serviceKeyElId");t&&(t.value=e.serviceKey);const s=this.wrapper.getElementById(this.inputOptions,"phoneNumberElId");s&&(s.value=e.phoneNumber);const i=this.wrapper.getElementById(this.inputOptions,"endpointElId");i&&(i.value=e.endpoint);const n=this.wrapper.getElementById(this.inputOptions,"languageCodeElId");n&&(n.value=e.languageCode);const a=this.wrapper.getElementById(this.inputOptions,"authHeaderElId");a&&(a.value=e.authorizationHeader),this.refreshParams()}removeConfig(e){this.configManager.removeConfig(e),this.refreshSavedConfigsDisplay()}removeAllConfigs(){this.configManager.removeAll(),this.refreshSavedConfigsDisplay()}}class Utils{static postAjax(e,t={},s,i){var n,a,r="string"==typeof s?s:Object.keys(s).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&");const o=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP");o.open("POST",e),o.onreadystatechange=function(){3<o.readyState&&200===o.status&&i(o.responseText)},o.setRequestHeader("Content-Type","application/xml");for([n,a]of Object.entries(t))o.setRequestHeader(n,a);return o.send(r),o}static xmlToJson(e){var t={};if(1===e.nodeType){if(0<e.attributes.length){t["@attributes"]={};for(var s=0;s<e.attributes.length;s++){var i=e.attributes.item(s);t["@attributes"][i.nodeName]=i.nodeValue}}}else 3===e.nodeType&&(t=e.nodeValue);if(e.hasChildNodes())for(var n=0;n<e.childNodes.length;n++){var a,r=e.childNodes.item(n),o=r.nodeName;void 0===t[o]?t[o]=Utils.xmlToJson(r):(void 0===t[o].push&&(a=t[o],t[o]=[],t[o].push(a)),t[o].push(Utils.xmlToJson(r)))}return t}}class Wrapper{getElementById(e,t,s=!1){e=e[t],e=document.getElementById(e);if(!e&&s)throw new Error("Element for "+t+" is not found. Please specify it configuration options");return e}}